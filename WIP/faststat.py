data=[(0, 336), (336, 2086), (2422, 2087), (4509, 2086), (6595, 2087), (8682, 2086), (10768, 2086), (12854, 2087), (14941, 2086), 
  (17027, 2087), (19114, 2086), (21200, 2086), (23286, 2087), (25373, 2086), (27459, 2087), (29546, 2086), (31632, 2086), 
  (33718, 2087), (35805, 2086), (37891, 2087), (39978, 2086), (42064, 2086), (44150, 2087), (46237, 2086), (48323, 2087), 
  (50410, 2086), (52496, 2086), (54582, 2087), (56669, 2086), (58755, 2087), (60842, 2086), (62928, 2086), (65014, 2087), 
  (67101, 2086), (69187, 2087), (71274, 2086), (73360, 2086), (75446, 2087), (77533, 2086), (79619, 2087), (81706, 2086), 
  (83792, 2086), (85878, 2087), (87965, 2086), (90051, 2087), (92138, 2086), (94224, 2086), (96310, 2087), (98397, 2086), 
  (100483, 2087), (102570, 2086), (104656, 2086), (106742, 2087), (108829, 2086), (110915, 2087), (113002, 2086), (115088, 2086), 
  (117174, 2087), (119261, 2086), (121347, 2087), (123434, 2086), (125520, 2086), (127606, 2087), (129693, 2086), (131779, 2087), 
  (133866, 2086), (135952, 2086), (138038, 2087), (140125, 2086), (142211, 2087), (144298, 2086), (146384, 1084), (147469, 1958), 
  (149427, 2086), (151513, 2087), (153600, 2086), (155686, 2086), (157772, 2087), (159859, 2086), (161945, 2087), (164032, 2086), 
  (166118, 2086), (168204, 2087), (170291, 2086), (172377, 2087), (174464, 2086), (176550, 2086), (178636, 2087), (180723, 2086), 
  (182809, 2087), (184896, 2086), (186982, 2086), (189068, 2087), (191155, 2086), (193241, 2087), (195328, 2086), (197414, 2086), 
  (199500, 2087), (201587, 2086), (203673, 2087), (205760, 2086), (207846, 2086), (209932, 2087), (212019, 2086), (214105, 2087), 
  (216192, 2086), (218278, 2086), (220364, 2087), (222451, 2086), (224537, 2087), (226624, 2086), (228710, 2086), (230796, 2087), 
  (232883, 2086), (234969, 2087), (237056, 2086), (239142, 2086), (241228, 2087), (243315, 2086), (245401, 2087), (247488, 2086), 
  (249574, 2086), (251660, 2087), (253747, 2086), (255833, 2087), (257920, 2086), (260006, 2086), (262092, 2087), (264179, 2086), 
  (266265, 2087), (268352, 2086), (270438, 2086), (272524, 2087), (274611, 2086), (276697, 2087), (278784, 2086), (280870, 2086), 
  (282956, 2087), (285043, 2086), (287129, 2087), (289216, 2086), (291302, 1837), (293140, 1950), (295090, 2086), (297176, 2087), 
  (299263, 2086), (301349, 2087), (303436, 2086), (305522, 2086), (307608, 2087), (309695, 2086), (311781, 2087), (313868, 2086), 
  (315954, 2086), (318040, 2087), (320127, 2086), (322213, 2087), (324300, 2086), (326386, 2086), (328472, 2087), (330559, 2086), 
  (332645, 2087), (334732, 2086), (336818, 2086), (338904, 2087), (340991, 2086), (343077, 2087), (345164, 2086), (347250, 2086), 
  (349336, 2087), (351423, 2086), (353509, 2087), (355596, 2086), (357682, 2086), (359768, 2087), (361855, 2086), (363941, 2087), 
  (366028, 2086), (368114, 2086), (370200, 2087), (372287, 2086), (374373, 2087), (376460, 2086), (378546, 2086), (380632, 2087), 
  (382719, 2086), (384805, 2087), (386892, 2086), (388978, 2086), (391064, 2087), (393151, 2086), (395237, 2087), (397324, 2086), 
  (399410, 2086), (401496, 2087), (403583, 2086), (405669, 2087), (407756, 2086), (409842, 2086), (411928, 2087), (414015, 2086), 
  (416101, 2087), (418188, 2086), (420274, 2086), (422360, 2087), (424447, 2086), (426533, 2087), (428620, 2086), (430706, 2086), 
  (432792, 2087), (434879, 2086), (436965, 2087), (439052, 399), (439452, 1752), (441204, 2086), (443290, 2087), (445377, 2086), 
  (447463, 2087), (449550, 2086), (451636, 2086), (453722, 2087), (455809, 2086), (457895, 2087), (459982, 2086), (462068, 2086), 
  (464154, 2087), (466241, 2086), (468327, 2087), (470414, 2086), (472500, 2086), (474586, 2087), (476673, 2086), (478759, 2087), 
  (480846, 2086), (482932, 2086), (485018, 2087), (487105, 2086), (489191, 2087), (491278, 2086), (493364, 2086), (495450, 2087), 
  (497537, 2086), (499623, 2087), (501710, 2086), (503796, 2086), (505882, 2087), (507969, 2086), (510055, 2087), (512142, 2086), 
  (514228, 2086), (516314, 2087), (518401, 2086), (520487, 2087), (522574, 2086), (524660, 2086), (526746, 2087), (528833, 2086), 
  (530919, 2087), (533006, 2086), (535092, 2086), (537178, 2087), (539265, 2086), (541351, 2087), (543438, 2086), (545524, 2086), 
  (547610, 2087), (549697, 2086), (551783, 2087), (553870, 2086), (555956, 2086), (558042, 2087), (560129, 2086), (562215, 2087), 
  (564302, 2086), (566388, 2086), (568474, 2087), (570561, 2086), (572647, 2087), (574734, 2086), (576820, 2086), (578906, 2087), 
  (580993, 2086), (583079, 1904)]

  
numaccess=0
for x in data:
  numaccess+=x[1]
print("Basic method: ", numaccess)
basicNumAccess=numaccess
def roundUp(n, div): return ((n+div-1)//div)*div
def roundDown(n, div): return (n//div)*div

#cacheSize=[128,512,1024,2048,4096,8192] # Size +4.6%, accesses -93.8%
#cacheSize=[64,256,1024,4096] # Size +8.3%, accesses -96.7%
cacheSize=[32,128,512,1024,2048,4096,8192] # Size +17.1%, accesses -98.2%
#cacheSize=[40,80,320,640,1280] # Size +17.2%, accesses -97.8%
#cacheSize=[32,64,128,512,2048,8192] # Size +22.9%, accesses -98.2%
#cacheSize=[4,8,16,32,64,128,256,1024,2048,4096,8192] # Size +199.2%, accesses -99.4%

numAccess=0

def fastStat(start,end):
  global numAccess
  okI=-1
 # print("fastStat",start,end)
  for cacheI in range(len(cacheSize)):
    startIT=roundUp(start,cacheSize[cacheI])
    endIT=roundDown(end, cacheSize[cacheI])
    if endIT>startIT:
      okI=cacheI
      startI=startIT
      endI=endIT
#      print(okI,startI, endI, cacheSize[cacheI])
    else:
      break
  if okI<0:
    #Standard method
    numAccess+=end-start
  else:
    numAccess+=1
    for cacheI in range(okI-1,-1,-1):
      curC=cacheSize[cacheI]
      startIOpt=roundUp(start,curC)
      endIOpt=roundDown(end, curC)
      if startIOpt<startI:
        numAccess+=(startI-startIOpt)//curC
#        print("Optimized start from",startI,"to",startIOpt,"...",(startI-startIOpt)//curC,"*",curC)
        startI=startIOpt
      if endIOpt>endI:
        numAccess+=(endIOpt-endI)//curC
 #       print("Optimized end from",endI,"to",endIOpt,"...",(endIOpt-endI)//curC,"*",curC)
        endI=endIOpt
    numAccess+=startI-start
    numAccess+=end-endI
first=True
for x in data:
  if first:
    first=False
    continue
  (start, size)=x
  end=start+size
  fastStat(start,start+size)
  #fastStart=roundup(start,cachedSize[0])
  #fastStartI=1
  #print(start,fastStart,end)
#  break
incSize=0.
for x in cacheSize:
  incSize+=5./x
print("Cached",numAccess,"with size increase of %.1f%%"%(incSize*100), "decreased num access of: %.1f%%"%(100.*(basicNumAccess-numAccess)/basicNumAccess))